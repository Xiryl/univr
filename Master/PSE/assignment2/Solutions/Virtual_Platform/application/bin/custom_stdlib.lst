ca65 V2.17 - Git 582aa41
Main file   : src/custom_stdlib.s
Current file: src/custom_stdlib.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git 582aa41
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.export		_srand
000000r 1               	.export		_rand
000000r 1               
000000r 1               .segment	"BSS"
000000r 1               
000000r 1               _rseed:
000000r 1  00 00        	.res	2,$00
000002r 1               
000002r 1               ; ---------------------------------------------------------------
000002r 1               ; void __near__ srand (int)
000002r 1               ; ---------------------------------------------------------------
000002r 1               
000002r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_srand: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  A0 01        	ldy     #$01
000005r 1  B1 rr        	lda     (sp),y
000007r 1  8D rr rr     	sta     _rseed+1
00000Ar 1  88           	dey
00000Br 1  B1 rr        	lda     (sp),y
00000Dr 1  8D rr rr     	sta     _rseed
000010r 1  4C rr rr     	jmp     incsp2
000013r 1               
000013r 1               .endproc
000013r 1               
000013r 1               ; ---------------------------------------------------------------
000013r 1               ; int __near__ rand (void)
000013r 1               ; ---------------------------------------------------------------
000013r 1               
000013r 1               .segment	"CODE"
000013r 1               
000013r 1               .proc	_rand: near
000013r 1               
000013r 1               .segment	"CODE"
000013r 1               
000013r 1  AD rr rr     	lda     _rseed
000016r 1  AE rr rr     	ldx     _rseed+1
000019r 1  20 rr rr     	jsr     axlong
00001Cr 1  20 rr rr     	jsr     pusheax
00001Fr 1  A2 4E        	ldx     #$4E
000021r 1  A9 C6        	lda     #$C6
000023r 1  85 rr        	sta     sreg
000025r 1  A9 41        	lda     #$41
000027r 1  85 rr        	sta     sreg+1
000029r 1  A9 6D        	lda     #$6D
00002Br 1  20 rr rr     	jsr     tosmuleax
00002Er 1  20 rr rr     	jsr     pusheax
000031r 1  A2 30        	ldx     #$30
000033r 1  A9 00        	lda     #$00
000035r 1  A9 39        	lda     #$39
000037r 1  20 rr rr     	jsr     tosadd0ax
00003Ar 1  20 rr rr     	jsr     pusheax
00003Dr 1  A2 7F        	ldx     #$7F
00003Fr 1  A9 00        	lda     #$00
000041r 1  A9 FF        	lda     #$FF
000043r 1  20 rr rr     	jsr     tosand0ax
000046r 1  8D rr rr     	sta     _rseed
000049r 1  8E rr rr     	stx     _rseed+1
00004Cr 1  60           	rts
00004Dr 1               
00004Dr 1               .endproc
00004Dr 1               
00004Dr 1               

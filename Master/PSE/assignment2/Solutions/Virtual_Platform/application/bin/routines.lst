ca65 V2.17 - Git 582aa41
Main file   : src/routines.s
Current file: src/routines.s

000000r 1               ;
000000r 1               ; File generated by cc65 v 2.17 - Git 582aa41
000000r 1               ;
000000r 1               	.fopt		compiler,"cc65 v 2.17 - Git 582aa41"
000000r 1               	.setcpu		"6502"
000000r 1               	.smart		on
000000r 1               	.autoimport	on
000000r 1               	.case		on
000000r 1               	.debuginfo	off
000000r 1               	.importzp	sp, sreg, regsave, regbank
000000r 1               	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
000000r 1               	.macpack	longbranch
000000r 2               .macro  jeq     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                       bne     *+5
000000r 2                       jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               beq     Target
000000r 2                       .else
000000r 2                               bne     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jne     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bne     Target
000000r 2                       .else
000000r 2                               beq     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jmi     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bmi     Target
000000r 2                       .else
000000r 2                               bpl     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jpl     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bpl     Target
000000r 2                       .else
000000r 2                               bmi     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcs     Target
000000r 2                       .else
000000r 2                               bcc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jcc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bcc     Target
000000r 2                       .else
000000r 2                               bcs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvs     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvs     Target
000000r 2                       .else
000000r 2                               bvc     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               .macro  jvc     Target
000000r 2                       .if     .match(Target, 0)
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .elseif .def(Target) .and .const((*-2)-(Target)) .and ((*+2)-(Target) <= 127)
000000r 2                               bvc     Target
000000r 2                       .else
000000r 2                               bvs     *+5
000000r 2                               jmp     Target
000000r 2                       .endif
000000r 2               .endmacro
000000r 2               
000000r 1               	.import		_set_psel
000000r 1               	.import		_set_penable
000000r 1               	.import		_set_pwrite
000000r 1               	.import		_get_pready
000000r 1               	.import		_set_pwdata_16
000000r 1               	.import		_set_pwdata
000000r 1               	.import		_get_prdata
000000r 1               	.import		_reset_flags
000000r 1               	.export		_mul
000000r 1               	.export		_io_write
000000r 1               	.export		_io_read
000000r 1               	.export		_mulIEEE754_verilog
000000r 1               	.export		_mulIEEE754_vhdl
000000r 1               
000000r 1               ; ---------------------------------------------------------------
000000r 1               ; unsigned long __near__ mul (unsigned int, unsigned int)
000000r 1               ; ---------------------------------------------------------------
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1               .proc	_mul: near
000000r 1               
000000r 1               .segment	"CODE"
000000r 1               
000000r 1  20 rr rr     	jsr     pushax
000003r 1  A2 00        	ldx     #$00
000005r 1  20 rr rr     	jsr     pushl0
000008r 1  20 rr rr     	jsr     _reset_flags
00000Br 1  A0 09        	ldy     #$09
00000Dr 1  20 rr rr     	jsr     pushwysp
000010r 1  A0 07        	ldy     #$07
000012r 1  B1 rr        	lda     (sp),y
000014r 1  AA           	tax
000015r 1  88           	dey
000016r 1  B1 rr        	lda     (sp),y
000018r 1  20 rr rr     	jsr     _set_pwdata_16
00001Br 1  A9 01        	lda     #$01
00001Dr 1  20 rr rr     	jsr     _set_psel
000020r 1  A9 01        	lda     #$01
000022r 1  20 rr rr     	jsr     _set_penable
000025r 1  4C rr rr     	jmp     L000E
000028r 1  EA           L000C:	nop
000029r 1  20 rr rr     L000E:	jsr     _get_pready
00002Cr 1  C9 00        	cmp     #$00
00002Er 1  F0 F8        	beq     L000C
000030r 1  20 rr rr     	jsr     _get_prdata
000033r 1  20 rr rr     	jsr     steax0sp
000036r 1  A9 00        	lda     #$00
000038r 1  20 rr rr     	jsr     _set_penable
00003Br 1  A9 00        	lda     #$00
00003Dr 1  20 rr rr     	jsr     _set_psel
000040r 1  20 rr rr     	jsr     ldeax0sp
000043r 1  4C rr rr     	jmp     incsp8
000046r 1               
000046r 1               .endproc
000046r 1               
000046r 1               ; ---------------------------------------------------------------
000046r 1               ; void __near__ io_write (unsigned long)
000046r 1               ; ---------------------------------------------------------------
000046r 1               
000046r 1               .segment	"CODE"
000046r 1               
000046r 1               .proc	_io_write: near
000046r 1               
000046r 1               .segment	"CODE"
000046r 1               
000046r 1  20 rr rr     	jsr     pusheax
000049r 1  20 rr rr     	jsr     _reset_flags
00004Cr 1  20 rr rr     	jsr     ldeax0sp
00004Fr 1  20 rr rr     	jsr     _set_pwdata
000052r 1  A9 01        	lda     #$01
000054r 1  20 rr rr     	jsr     _set_pwrite
000057r 1  A9 02        	lda     #$02
000059r 1  20 rr rr     	jsr     _set_psel
00005Cr 1  A9 00        	lda     #$00
00005Er 1  20 rr rr     	jsr     _set_psel
000061r 1  A9 00        	lda     #$00
000063r 1  20 rr rr     	jsr     _set_penable
000066r 1  A2 00        	ldx     #$00
000068r 1  86 rr        	stx     sreg
00006Ar 1  86 rr        	stx     sreg+1
00006Cr 1  8A           	txa
00006Dr 1  20 rr rr     	jsr     _set_pwdata
000070r 1  A9 00        	lda     #$00
000072r 1  20 rr rr     	jsr     _set_pwrite
000075r 1  4C rr rr     	jmp     incsp4
000078r 1               
000078r 1               .endproc
000078r 1               
000078r 1               ; ---------------------------------------------------------------
000078r 1               ; unsigned long __near__ io_read (void)
000078r 1               ; ---------------------------------------------------------------
000078r 1               
000078r 1               .segment	"CODE"
000078r 1               
000078r 1               .proc	_io_read: near
000078r 1               
000078r 1               .segment	"CODE"
000078r 1               
000078r 1  20 rr rr     	jsr     decsp4
00007Br 1  20 rr rr     	jsr     _reset_flags
00007Er 1  A9 00        	lda     #$00
000080r 1  20 rr rr     	jsr     _set_pwrite
000083r 1  A9 02        	lda     #$02
000085r 1  20 rr rr     	jsr     _set_psel
000088r 1  4C rr rr     	jmp     L0035
00008Br 1  EA           L0033:	nop
00008Cr 1  20 rr rr     L0035:	jsr     _get_pready
00008Fr 1  C9 00        	cmp     #$00
000091r 1  F0 F8        	beq     L0033
000093r 1  20 rr rr     	jsr     _get_prdata
000096r 1  20 rr rr     	jsr     steax0sp
000099r 1  A9 00        	lda     #$00
00009Br 1  20 rr rr     	jsr     _set_psel
00009Er 1  A9 00        	lda     #$00
0000A0r 1  20 rr rr     	jsr     _set_penable
0000A3r 1  A2 00        	ldx     #$00
0000A5r 1  86 rr        	stx     sreg
0000A7r 1  86 rr        	stx     sreg+1
0000A9r 1  8A           	txa
0000AAr 1  20 rr rr     	jsr     _set_pwdata
0000ADr 1  A9 00        	lda     #$00
0000AFr 1  20 rr rr     	jsr     _set_pwrite
0000B2r 1  20 rr rr     	jsr     ldeax0sp
0000B5r 1  4C rr rr     	jmp     incsp4
0000B8r 1               
0000B8r 1               .endproc
0000B8r 1               
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               ; unsigned long __near__ mulIEEE754_verilog (unsigned long, unsigned long)
0000B8r 1               ; ---------------------------------------------------------------
0000B8r 1               
0000B8r 1               .segment	"CODE"
0000B8r 1               
0000B8r 1               .proc	_mulIEEE754_verilog: near
0000B8r 1               
0000B8r 1               .segment	"CODE"
0000B8r 1               
0000B8r 1  20 rr rr     	jsr     pusheax
0000BBr 1  A2 00        	ldx     #$00
0000BDr 1  20 rr rr     	jsr     pushl0
0000C0r 1  20 rr rr     	jsr     _reset_flags
0000C3r 1  A0 0B        	ldy     #$0B
0000C5r 1  20 rr rr     	jsr     ldeaxysp
0000C8r 1  20 rr rr     	jsr     _set_pwdata
0000CBr 1  A9 04        	lda     #$04
0000CDr 1  20 rr rr     	jsr     _set_psel
0000D0r 1  A9 01        	lda     #$01
0000D2r 1  20 rr rr     	jsr     _set_penable
0000D5r 1  A9 00        	lda     #$00
0000D7r 1  20 rr rr     	jsr     _set_penable
0000DAr 1  A0 07        	ldy     #$07
0000DCr 1  20 rr rr     	jsr     ldeaxysp
0000DFr 1  20 rr rr     	jsr     _set_pwdata
0000E2r 1  A9 04        	lda     #$04
0000E4r 1  20 rr rr     	jsr     _set_psel
0000E7r 1  A9 01        	lda     #$01
0000E9r 1  20 rr rr     	jsr     _set_penable
0000ECr 1  4C rr rr     	jmp     L005A
0000EFr 1  EA           L0058:	nop
0000F0r 1  20 rr rr     L005A:	jsr     _get_pready
0000F3r 1  C9 00        	cmp     #$00
0000F5r 1  F0 F8        	beq     L0058
0000F7r 1  20 rr rr     	jsr     _get_prdata
0000FAr 1  20 rr rr     	jsr     steax0sp
0000FDr 1  A9 00        	lda     #$00
0000FFr 1  20 rr rr     	jsr     _set_penable
000102r 1  A9 00        	lda     #$00
000104r 1  20 rr rr     	jsr     _set_psel
000107r 1  20 rr rr     	jsr     ldeax0sp
00010Ar 1  A0 0C        	ldy     #$0C
00010Cr 1  4C rr rr     	jmp     addysp
00010Fr 1               
00010Fr 1               .endproc
00010Fr 1               
00010Fr 1               ; ---------------------------------------------------------------
00010Fr 1               ; unsigned long __near__ mulIEEE754_vhdl (unsigned long, unsigned long)
00010Fr 1               ; ---------------------------------------------------------------
00010Fr 1               
00010Fr 1               .segment	"CODE"
00010Fr 1               
00010Fr 1               .proc	_mulIEEE754_vhdl: near
00010Fr 1               
00010Fr 1               .segment	"CODE"
00010Fr 1               
00010Fr 1  20 rr rr     	jsr     pusheax
000112r 1  A2 00        	ldx     #$00
000114r 1  20 rr rr     	jsr     pushl0
000117r 1  20 rr rr     	jsr     _reset_flags
00011Ar 1  A0 0B        	ldy     #$0B
00011Cr 1  20 rr rr     	jsr     ldeaxysp
00011Fr 1  20 rr rr     	jsr     _set_pwdata
000122r 1  A9 08        	lda     #$08
000124r 1  20 rr rr     	jsr     _set_psel
000127r 1  A9 01        	lda     #$01
000129r 1  20 rr rr     	jsr     _set_penable
00012Cr 1  A9 00        	lda     #$00
00012Er 1  20 rr rr     	jsr     _set_penable
000131r 1  A0 07        	ldy     #$07
000133r 1  20 rr rr     	jsr     ldeaxysp
000136r 1  20 rr rr     	jsr     _set_pwdata
000139r 1  A9 08        	lda     #$08
00013Br 1  20 rr rr     	jsr     _set_psel
00013Er 1  A9 01        	lda     #$01
000140r 1  20 rr rr     	jsr     _set_penable
000143r 1  4C rr rr     	jmp     L007B
000146r 1  EA           L0079:	nop
000147r 1  20 rr rr     L007B:	jsr     _get_pready
00014Ar 1  C9 00        	cmp     #$00
00014Cr 1  F0 F8        	beq     L0079
00014Er 1  20 rr rr     	jsr     _get_prdata
000151r 1  20 rr rr     	jsr     steax0sp
000154r 1  A9 00        	lda     #$00
000156r 1  20 rr rr     	jsr     _set_penable
000159r 1  A9 00        	lda     #$00
00015Br 1  20 rr rr     	jsr     _set_psel
00015Er 1  20 rr rr     	jsr     ldeax0sp
000161r 1  A0 0C        	ldy     #$0C
000163r 1  4C rr rr     	jmp     addysp
000166r 1               
000166r 1               .endproc
000166r 1               
000166r 1               

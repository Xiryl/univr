SYMBOLS {
    __EXEHDR__:    type = import;
    __STACKSIZE__  : type = weak, value = $00400; # Four pages stack.

    __MEM1_START__ : type = weak, value = $00000;
    __MEM1_SIZE__  : type = weak, value = $04000 - __STACKSIZE__;

    __MAIN_START__ : type = weak, value = $0C001;
    __MAIN_SIZE__  : type = weak, value = $04000;
}
# The usable RAM memory area begins after the 6502 stack storage in page 1,
#  so it is defined as starting at location $200 and filling the remaining
#  4K of space (4096 - 2 * 256 = 3584 = $0E00). The 2K of ROM space begins
#  at address $F800 and goes to $FFFF (size = $0800).
MEMORY {
    ZP:     file = %O, type = rw, start = $00000, size = $00200, define = yes;
    HEADER: file = %O, type = ro, start = $00000, size = $00001;
    RAM1:   file = %O, type = rw, start = __MEM1_START__, size = __MEM1_SIZE__, define = yes;
    ROM:    file = %O, type = ro, start = __MAIN_START__, size = __MAIN_SIZE__, define = yes, fill = yes, fillval= $FF;
}
# Next, the memory segments within the memory devices need to be defined.
# A standard segment definition is used, with one notable exception.
# The interrupt and reset vector locations need to be defined at locations
#  $FFFA through $FFFF. A special segment named VECTORS is defined that
#  resides at these locations. Later, the interrupt vector map will be
#  created and placed in the VECTORS segment, and the linker will put
#  these vectors at the proper memory locations.
#
# The meaning of each of these segments is as follows:
#  ZEROPAGE:Data in page 0, defined by ZP as starting at $0 with length $100
#  DATA:    Initialized data that can be modified by the program, stored in RAM
#  BSS:     Uninitialized data stored in RAM (used for variable storage)
#  HEAP:    Uninitialized C-level heap storage in RAM, optional
#  STARTUP: The program initialization code, stored in ROM
#  INIT:    The code needed to initialize the system, stored in ROM
#  CODE:    The program code, stored in ROM
#  RODATA:  Initialized data that cannot be modified by the program, stored in ROM
#  VECTORS: The interrupt vector table, stored in ROM at location $FFFA
SEGMENTS {
    ZEROPAGE: load = ZP,        type = zp,  define   = yes;
    EXEHDR:   load = HEADER,    type = ro;
    STARTUP:  load = ROM,       type = ro;
    LOWCODE:  load = ROM,       type = ro,                optional = yes;
    INIT:     load = ROM,       type = ro,  define = yes, optional = yes;
    ONCE:     load = ROM,       type = ro,                optional = yes;
    CODE:     load = ROM,       type = ro;
    RODATA:   load = ROM,       type = ro;
    DATA:     load = ROM,       type = rw,  define = yes,                 run  = RAM1;
    BSS:      load = RAM1,      type = bss, define = yes;
    HEAP:     load = RAM1,      type = bss,               optional = yes;
}
# The final section of the definition file contains the data constructors
#  and destructors used for system startup. In addition, if the heap is used,
#  the maximum C-level stack size needs to be defined in order for the system
#  to be able to reliably allocate blocks of memory. The stack size selection
#  must be greater than the maximum amount of storage required to run the
#  program, keeping in mind that the C-level subroutine call stack and all
#  local variables are stored in this stack. The FEATURES section defines
#  the required constructor/destructor attributes and the SYMBOLS section
#  defines the stack size. The constructors will be run via a call to
#  initlib in the startup assembly code and the destructors will be run
#  via an assembly language call to donelib during program termination.
FEATURES {
    CONDES: segment = INIT,
            type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            import  = __CALLIRQ__;
}
